[tool.poetry]
name = "safe-ds-datasets"
version = "0.19.0"
description = "Ready-to-use datasets for the Safe-DS Python library."
license = "MIT"
authors = ["Lars Reimann <mail@larsreimann.com>"]
readme = "docs/README.md"
repository = "https://github.com/Safe-DS/Datasets"
documentation = "https://datasets.safe-ds.com"
keywords = ["data-science", "datasets", "machine-learning"]
packages = [
    { include = "safeds_datasets", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.11,<3.13"
safe-ds = ">=0.24,<0.29"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.2.1,<9.0.0"
pytest-cov = "^5.0.0"

[tool.poetry.group.docs.dependencies]
jupyter = "^1.0.0"
mkdocs = "^1.4.2"
mkdocstrings = ">=0.20,<0.28"
mkdocstrings-python = ">=0.8.3,<1.11.0"
mkdocs-autorefs = ">=0.4.1,<1.3.0"
mkdocs-gen-files = ">=0.4,<0.6"
mkdocs-glightbox = ">=0.3.1,<0.5.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-material = "^9.1.2"
mkdocs-section-index = "^0.3.9"
mkdocs-jupyter = ">=0.23,<0.26"
mkdocs-exclude = "^1.0.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "smoke: quickly testing core functionality",
]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
ignore-init-module-imports = true

select = [
    "F",
    "E",
    "W",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "INT",
    "ARG",
    "PTH",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "NPY",
    "RUF"
]
ignore = [
    # line-too-long (handled by black)
    "E501",
    # tab-indentation (handled by black)
    "W191",
    # trailing-whitespace (handled by black)
    "W291",
    # missing-newline-at-end-of-file (handled by black)
    "W292",
    # blank-line-with-witespace (handled by black)
    "W293",
    # boolean-positional-arg-in-function-definition (we leave it to the call-site)
    "FBT001",
    # boolean-default-value-in-function-definition (we leave it to the call-site)
    "FBT002",
    # builtin-attribute-shadowing (not an issue)
    "A003",
    # implicit-return (can add a return even though all cases are covered)
    "RET503",
    # superfluous-else-return (sometimes it's more readable)
    "RET505",
    # superfluous-else-raise (sometimes it's more readable)
    "RET506",
    # superfluous-else-continue (sometimes it's more readable)
    "RET507",
    # superfluous-else-break (sometimes it's more readable)
    "RET508",
    # private-member-access (we cannot always avoid it if we want a clean API)
    "SLF001",
    # if-else-block-instead-of-if-exp (an if-else block can be more readable)
    "SIM108",
    # compare-to-empty-string (sometimes it's better to be explicit)
    "PLC1901",
    # too-many-return-statements
    "PLR0911",
    # too-many-branches
    "PLR0912",
    # too-many-arguments
    "PLR0913",
    # too-many-statements
    "PLR0915",
    # magic-value-comparison
    "PLR2004",
    # raise-vanilla-args
    "TRY003",
]

[tool.ruff.lint.per-file-ignores]
"*test*.py" = [
    # Undocumented declarations
    "D10",
]
"__init__.py" = [
    # runtime-import-in-type-checking-block: Does not work with apipkg.
    "TCH004",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
